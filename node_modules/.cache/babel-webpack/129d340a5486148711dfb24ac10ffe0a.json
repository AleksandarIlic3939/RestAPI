{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { retry, catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.first = \"\";\n      this.prev = \"\";\n      this.next = \"\";\n      this.last = \"\";\n      this.REST_API_SERVER = \"http://localhost:3000\";\n    }\n\n    parseLinkHeader(header) {\n      if (header.length == 0) {\n        return;\n      }\n\n      let parts = header.split(',');\n      var links = {};\n      parts.forEach(p => {\n        let section = p.split(',');\n        var url = section[0].replace(/<(.*)>/, '$1').trim;\n        var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n        links[name] = url;\n      });\n      this.first = links[\"first\"];\n      this.prev = links[\"prev\"];\n      this.next = links[\"next\"];\n      this.last = links[\"last\"];\n    }\n\n    handleError(error) {\n      let errorMessage = 'Unknown error!';\n\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = `Error: ${error.error.message}`; // klijent-strana errors.\n      } else {\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`; // server-strana errors.\n      }\n\n      window.alert(errorMessage);\n      return throwError(errorMessage);\n    }\n\n    sendGetRequest() {\n      return this.httpClient.get(this.REST_API_SERVER, {\n        params: new HttpParams({\n          fromString: \"_page=1&_limit=20\"\n        }),\n        observe: \"response\"\n      }).pipe(retry(3), catchError(this.handleError), tap(res => {\n        console.log(res.headers.get('Link'));\n        this.parseLinkHeader(res.headers.get('Link'));\n      }));\n    }\n\n    sendGetRequestToUrl(url) {\n      return this.httpClient.get(url, {\n        observe: \"response\"\n      }).pipe(retry(3), catchError(this.handleError), tap(res => {\n        console.log(res.headers.get('Link'));\n        this.parseLinkHeader(res.headers.get('Link'));\n      }));\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}